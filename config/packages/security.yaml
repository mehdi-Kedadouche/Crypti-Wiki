security:
    encoders:
        App\Entity\User: bcrypt
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        database_users:
            entity: { class: App\Entity\User, property: email }
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider: # app_ser_provider est un nom choisi par nous
            # Les utilisateurs seront situés dans une entité
            entity:
                # L'entité cible est 'User'
                class: App\Entity\User
                # Quelle est la propriété utilisée pour l'identification
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

    # api_login:
    #     pattern: ^/api/v1/login # Default: .*
    #     provider: fos_userbundle

        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                provider: app_user_provider
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        main:
                lazy: true
                provider: app_user_provider # La rubrique définie auparavant (plus haut)
                pattern: ^/
                form_login:
                    # "app_login" is the name of the route created previously
                    login_path: app_login
                    check_path: app_login
                    username_parameter: email
                    password_parameter: password
                logout:
                    path: app_logout
                    
            
    
                    # authenticators:
                    #     - App\Security\FormLoginAuthenticator
                
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

        # Le firewall de notre API => à adapter selon nos besoins

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/api, roles: PUBLIC_ACCESS }
        # IS_AUTHENTICATED_FULLY

        # - { path: ^/api/creature/create, roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/api/v1/edit/\d+, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api,       roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
